"""
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
"""

from botocore.vendored import requests
import boto3
import json
import string
import random
import resource_tools


def event_handler(event, context):
    """
    Lambda entry point. Print the event first.
    """
    resource_tools.debug("MediaTrailor Event Input: %s " % event)
    try:
        mediatailor = boto3.client('mediatailor')
        if event["RequestType"] == "Create":
            result = create_configuration(mediatailor, event, context)
        elif event["RequestType"] == "Update":
            result = update_configuration(mediatailor, event, context)
        elif event["RequestType"] == "Delete":
            result = delete_configuration(mediatailor, event, context)

    except Exception as exp:
        print("Exception: %s" % exp)
        result = {
            'Status': 'FAILED',
            'Data': {"Exception": str(exp)},
            'ResourceId': None
        }

    if 'ResponseURL' in event:
        resource_tools.send(event, context, result['Status'],
                        result['Data'], result['ResourceId'])
    return result


def create_configuration(mediatailor, event, context, auto_id=True):
    """
    Create a mediatailor configuration
    Return the configuration URL generated by mediatailor
    """

    if auto_id:
        channel_id = "%s-%s" % (resource_tools.stack_name(event), event["LogicalResourceId"])
    else:
        channel_id = event["PhysicalResourceId"]


    try:
        response = mediatailor.put_playback_configuration(
            Name = channel_id,
            AdDecisionServerUrl = event["ResourceProperties"]['AdDecisionServerUrl'],
            DashConfiguration = {
                'MpdLocation': 'DISABLED'
            },
            CdnConfiguration={
                'AdSegmentUrlPrefix': event["ResourceProperties"]['AdSegmentUrlPrefix'],
                'ContentSegmentUrlPrefix': event["ResourceProperties"]['ContentSegmentUrlPrefix']
            },
            SlateAdUrl = event["ResourceProperties"]["SlateAdUrl"],
            TranscodeProfileName = event["ResourceProperties"]["TranscodeProfileName"],
            VideoContentSourceUrl = event["ResourceProperties"]["VideoContentSourceUrl"],
            Tags=event["AssetTags"]
        )
        resource_tools.debug("MediaTailor Configuration: %s " % response)

        attributes = response["HlsConfiguration"]["ManifestEndpointPrefix"]
        resource_tools.debug("MediaTailor Attributes: %s " % attributes)

        result = {
            'Status': 'SUCCESS',
            'Attributes': attributes,
            'Response': response
        }

    except Exception as ex:
        print(ex)
        result = {
            'Status': 'FAILED',
            'Data': {"Exception": str(ex)},
            'ResourceId': channel_id
        }

    return result


def update_configuration(mediatailor, event, context):
    """
    Update a mediatailor configuration
    Return the configuration URL generated by mediatailor
    """

    if 'PhysicalResourceId' in event:
        channel_id = event["PhysicalResourceId"]
    else:
        channel_id = "%s-%s" % (resource_tools.stack_name(event), event["LogicalResourceId"])

    try:
        result = delete_configuration(mediatailor, event, context)
        if result['Status'] == 'SUCCESS':
            result = create_configuration(mediatailor, event, context, False)

    except Exception as ex:
        print(ex)
        result = {
            'Status': 'FAILED',
            'Data': {"Exception": str(ex)},
            'ResourceId': channel_id
        }

    return result


def delete_configuration(mediatailor, event, context):
    """
    Delete a mediatailor configuration
    Return success/failure
    """
    if 'PhysicalResourceId' in event:
        channel_id = event["PhysicalResourceId"]
    else:
        channel_id = "%s-%s" % (resource_tools.stack_name(event), event["LogicalResourceId"])

    try:
        response = mediatailor.delete_playback_configuration(Name=channel_id)
        result = {
            'Status': 'SUCCESS',
            'Data': response,
            'ResourceId': channel_id
        }

    except Exception as ex:
        print(ex)
        result = {
            'Status': 'FAILED',
            'Data': {"Exception": str(ex)},
            'ResourceId': channel_id
        }

    return result